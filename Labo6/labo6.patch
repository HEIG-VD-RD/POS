From 92b0188b9d7eb8d5e53874bd92ad4d103d58bb65 Mon Sep 17 00:00:00 2001
From: "rafael.dousse" <rafael.dousse@heig-vd.ch>
Date: Sat, 2 Nov 2024 09:16:41 +0100
Subject: [PATCH] Fin du labo06

---
 linux/usr/module/access.c | 244 ++++++++++++++++++++++++++------------
 linux/usr/src/vextctl.c   |  74 +++++++++++-
 2 files changed, 240 insertions(+), 78 deletions(-)

diff --git a/linux/usr/module/access.c b/linux/usr/module/access.c
index 491439705b..3b03083b2b 100644
--- a/linux/usr/module/access.c
+++ b/linux/usr/module/access.c
@@ -4,7 +4,6 @@
  * Copyright (c) 2020 HEIG-VD, REDS Institute
  *******************************************************************/
 
-
 #include <linux/init.h>
 #include <linux/kernel.h>
 #include <linux/module.h>
@@ -15,19 +14,18 @@
 #include <linux/platform_device.h>
 #include <linux/slab.h>
 #include <linux/of.h>
-
+#include <linux/leds.h>
 #include <asm/io.h>
 
 #include "rpisense.h"
 
-# define VEXT 0
+#define VIRT32 1
+
 // Offsets Registers
 #define LED_OFFSET 0x3a
 #define SWITCHES_OFFSET 0x12
 #define IRQ_CTRL 0x18
 
-#define LED_ON 0x1E
-#define LED_OFF 0x0
 #define SWITCHES_MASK 0xFF
 #define IRQ_CLEAR (1 << 0)
 #define LED0 (1 << 0)
@@ -41,8 +39,19 @@
 #define SWITCH4 0x4
 #define SWITCH5 0x5
 
-//Private data structure
-typedef struct priv_data {
+#define NBRLED 5
+
+// Structure for the LEDs
+struct my_leds
+{
+	u16 number;
+	u16 mask;
+	struct led_classdev led;
+};
+
+// Private data structure
+typedef struct priv_data
+{
 	// Memory addresses for vext
 	void *mem_addr;
 	// Led address
@@ -53,8 +62,18 @@ typedef struct priv_data {
 	void *irq_ctrl;
 	// IRQ number
 	int irqNum;
+	// led
+	struct my_leds leds[NBRLED];
+	// struct led_classdev led;
 } priv_data_t;
 
+/**
+ * @brief Handler for the IRQ
+ * @param irq The IRQ number
+ * @param dev_id The device ID
+ * @return IRQ_HANDLED if the IRQ was handled, IRQ_NONE otherwise
+ * Note: There could be concurrency issues since we don't use any locking mechanism
+ */
 static irqreturn_t irq_handler(int irq, void *dev_id)
 {
 	pr_info("(module): Interrupt received\n");
@@ -66,88 +85,163 @@ static irqreturn_t irq_handler(int irq, void *dev_id)
 	// Toggle the LED corresponding to the switch
 	switch (switches & SWITCHES_MASK)
 	{
-		case SWITCH1:
-			led = LED0;
-			break;
-		case SWITCH2:
-			led = LED1;
-			break;
-		case SWITCH3:
-			led = LED2;
-			break;
-		case SWITCH4:
-			led = LED3;
-			break;
-		case SWITCH5:
-			led = LED4;
-			break;
-		default:
-			return IRQ_NONE;
-			
+	case SWITCH1:
+		led = LED0;
+		break;
+	case SWITCH2:
+		led = LED1;
+		break;
+	case SWITCH3:
+		led = LED2;
+		break;
+	case SWITCH4:
+		led = LED3;
+		break;
+	case SWITCH5:
+		led = LED4;
+		break;
+	default:
+		return IRQ_NONE;
 	}
 
 	// Write the value of the switches to the LED
 	leds ^= led;
 	iowrite16(leds, priv->led_addr);
 
-    // Clear the IRQ by writing to IRQ_CTRL
-    iowrite16(IRQ_CLEAR, priv->irq_ctrl);
+	// Clear the IRQ by writing to IRQ_CTRL
+	iowrite16(IRQ_CLEAR, priv->irq_ctrl);
 
 	return IRQ_HANDLED;
 }
 
+/**
+ * @brief Set the brightness of the LED through the sysfs interface
+ * @param led_cdev The LED class device
+ * @param brightness The brightness to set
+ */
+void vext_brightness_set(struct led_classdev *led_cdev, enum led_brightness brightness)
+{
+	// We retrieve the led information to get the mask of the led and the priv_data to get the led address
+	struct my_leds *led_info = container_of(led_cdev, struct my_leds, led);
+	struct priv_data *priv = container_of(led_info - led_info->number, struct priv_data, leds[0]);
+
+	u16 led_state = ioread16(priv->led_addr);
 
+	// Set the LED to the desired brightness
+	if (brightness > 0)
+	{
+		led_state |= led_info->mask;
+	}
+	else
+	{
+		led_state &= ~led_info->mask;
+	}
+
+	iowrite16(led_state, priv->led_addr);
+}
+
+/**
+ * @brief Get the brightness of the LED through the sysfs interface
+ * @param led_cdev The LED class device
+ * @return The brightness of the LED
+ */
+enum led_brightness vext_brightness_get(struct led_classdev *led_cdev)
+{
+	// We retrieve the led information to get the mask of the led and the priv_data to get the led address
+	struct my_leds *led_info = container_of(led_cdev, struct my_leds, led);
+	struct priv_data *priv = container_of(led_info - led_info->number, struct priv_data, leds[0]);
+
+	uint16_t led_status = ioread16(priv->led_addr);
+
+	return (led_status & led_info->mask) ? LED_ON : LED_OFF;
+}
+
+/**
+ * @brief Probe function for the platform driver
+ * @param pdev The platform device
+ * @return 0 if the probe was successful, an error code otherwise
+ */
 static int vext_probe(struct platform_device *pdev)
 {
-	#if VEXT
-		priv_data_t *priv_data;
-		struct resource *res;	
-	
-		priv_data = kmalloc(sizeof(priv_data_t), GFP_KERNEL);
-
-		if (!priv_data){
-			return -ENOMEM;
-		}
+#if VIRT32
+	priv_data_t *priv_data;
+	struct resource *res;
+	int err;
 
-		platform_set_drvdata(pdev, priv_data);
-		res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-		if (!res){
-			return -ENODEV;
-		}
+	priv_data = kzalloc(sizeof(priv_data_t), GFP_KERNEL);
 
-		priv_data->mem_addr = devm_ioremap_resource(&pdev->dev, res);
-		if (IS_ERR(priv_data->mem_addr)) {
-			return PTR_ERR(priv_data->mem_addr);
-		}
+	if (!priv_data)
+	{
+		return -ENOMEM;
+	}
 
-		priv_data->led_addr = priv_data->mem_addr + LED_OFFSET;
-		priv_data->switches = priv_data->mem_addr + SWITCHES_OFFSET;
-		priv_data->irq_ctrl = priv_data->mem_addr + IRQ_CTRL;
+	platform_set_drvdata(pdev, priv_data);
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res)
+	{
+		return -ENODEV;
+	}
 
-		//  Retrieve the IRQ number from the DT.
-		priv_data->irqNum = platform_get_irq(pdev, 0);
-		if (priv_data->irqNum < 0) {
-			return priv_data->irqNum;
-		}
+	priv_data->mem_addr = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(priv_data->mem_addr))
+	{
+		return PTR_ERR(priv_data->mem_addr);
+	}
 
-		// Register the interrupt handler associated with the IRQ
-		int err = request_irq(priv_data->irqNum, irq_handler, IRQF_TRIGGER_HIGH, "irq_handler", (void *)priv_data);
-		if (err != 0) {
-			return err;
-		}
+	priv_data->led_addr = priv_data->mem_addr + LED_OFFSET;
+	priv_data->switches = priv_data->mem_addr + SWITCHES_OFFSET;
+	priv_data->irq_ctrl = priv_data->mem_addr + IRQ_CTRL;
 
+	//  Retrieve the IRQ number from the DT.
+	priv_data->irqNum = platform_get_irq(pdev, 0);
+	if (priv_data->irqNum < 0)
+	{
+		return priv_data->irqNum;
+	}
 
+	// Register the interrupt handler associated with the IRQ
+	err = request_irq(priv_data->irqNum, irq_handler, IRQF_TRIGGER_HIGH, "irq_handler", (void *)priv_data);
+	if (err != 0)
+	{
+		return err;
+	}
 
-		iowrite16(LED_ON, priv_data->led_addr);
-		pr_info("(module): vext driver initialized, LED ON\n");
+	// Led register
+	int i;
+	for (i = 0; i < NBRLED; i++)
+	{
+		priv_data->leds[i].number = i;
+		// We set the mask for each LED
+		priv_data->leds[i].mask = 1 << i;
+
+		// We set the name of the LED, the brightness set and get functions
+		priv_data->leds[i].led.name = kasprintf(GFP_KERNEL, "vext:led%d", i);
+		priv_data->leds[i].led.brightness_set = vext_brightness_set;
+		priv_data->leds[i].led.brightness_get = vext_brightness_get;
+
+		// Register the LED
+		err = led_classdev_register(&pdev->dev, &priv_data->leds[i].led);
+		if (err)
+		{
+			pr_err("Error registering led %d\n", i);
+			while (i--)
+			{
+				led_classdev_unregister(&priv_data->leds[i].led);
+			}
+			kfree(priv_data);
+			return err;
+		}
+	}
 
-	#else
-		rpisense_init();
-		display_led(0, true);
-		display_led(2, true);
-		display_led(4, true);
-	#endif
+	// iowrite16(LED_ON, priv_data->led_addr);
+	pr_info("(module): vext driver initialized, LED ON yeayy\n");
 
+#else
+	rpisense_init();
+	display_led(0, true);
+	display_led(2, true);
+	display_led(4, true);
+#endif
 
 	return 0;
 }
@@ -156,15 +250,20 @@ static int vext_remove(struct platform_device *pdev)
 {
 	priv_data_t *priv_data = platform_get_drvdata(pdev);
 
-	#if VEXT
+#if VIRT32
+	int i;
+	for (i = 0; i < NBRLED; i++)
+	{
+		led_classdev_unregister(&priv_data->leds[i].led);
+	}
 	iowrite16(LED_OFF, priv_data->led_addr);
 	kfree(platform_get_drvdata(pdev));
 	free_irq(priv_data->irqNum, (void *)priv_data);
 	pr_info("(module): vext driver removed, LED OFF\n");
-	#else
+#else
 	pr_info("(module): rpisense driver removed\n");
-	#endif
-	
+#endif
+
 	return 0;
 }
 
@@ -190,8 +289,6 @@ static struct platform_driver vext_driver = {
 
 module_platform_driver(vext_driver);
 
-
-
 /*
 
 static int access_init(void) {
@@ -218,6 +315,3 @@ static void access_exit(void) {
 
 module_init(access_init);
 module_exit(access_exit); */
-
-
-
diff --git a/linux/usr/src/vextctl.c b/linux/usr/src/vextctl.c
index 2cbc76048f..02a0afac0c 100644
--- a/linux/usr/src/vextctl.c
+++ b/linux/usr/src/vextctl.c
@@ -1,10 +1,78 @@
 #include <stdio.h>
-#include <stdlib.h>
+#include <fcntl.h>
 #include <unistd.h>
+#include <stdlib.h>
+#include <string.h>
+
+#define LED_PATH "/sys/class/leds/"
+#define HORIZONTAL_LEDS {"vext:led1", "vext:led0", "vext:led3"}
+#define VERTICAL_LEDS {"vext:led0", "vext:led2", "vext:led4"}
+#define DELAY 500000 // 500 ms
+
+/**
+ * @brief Set the state of an LED
+ * @param led_name The name of the LED
+ * @param state The state to set (0 or 1)
+ */
+void set_led_state(const char *led_name, int state)
+{
+	char led_brightness_path[256];
+	// Create the path to the LED brightness file
+	snprintf(led_brightness_path, sizeof(led_brightness_path), "%s%s/brightness", LED_PATH, led_name);
+
+	int fd = open(led_brightness_path, O_WRONLY);
+	if (fd < 0)
+	{
+		perror("Error opening LED brightness");
+		exit(EXIT_FAILURE);
+	}
+
+	// Convert state to string ("0" or "1") and write to LED brightness
+	char state_str[2];
+	snprintf(state_str, sizeof(state_str), "%d", state);
 
-int main(int argc, char **argv)
+	// Write state to the LED and close the file
+	lseek(fd, 0, SEEK_SET);
+	if (write(fd, state_str, strlen(state_str)) < 0)
+	{
+		perror("Error writing LED state");
+		close(fd);
+		exit(EXIT_FAILURE);
+	}
+	close(fd);
+}
+
+/**
+ * @brief Toggle the state of a set of LEDs
+ * @param leds_on The names of the LEDs to turn on
+ * @param leds_off The names of the LEDs to turn off
+ * @param count The number of LEDs to toggle
+ */
+void toggle_leds(const char **leds_on, const char **leds_off, int count)
 {
-	/* To be completed ... */
+	for (int i = 0; i < count; i++)
+	{
+		set_led_state(leds_off[i], 0);
+	}
+	for (int i = 0; i < count; i++)
+	{
+		set_led_state(leds_on[i], 1);
+	}
+}
+
+int main()
+{
+	const char *horizontal_leds[] = HORIZONTAL_LEDS;
+	const char *vertical_leds[] = VERTICAL_LEDS;
+
+	while (1)
+	{
+		toggle_leds(horizontal_leds, vertical_leds, 3);
+		usleep(DELAY);
+
+		toggle_leds(vertical_leds, horizontal_leds, 3);
+		usleep(DELAY);
+	}
 
 	return 0;
 }
-- 
GitLab

